function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
    @external BaseClass
    @see https://github.com/d3plus/d3plus-common#BaseClass
*/
import { select } from "d3-selection";
import { accessor, BaseClass, constant, stylize } from "d3plus-common";
/**
    @class Select
    @extends external:BaseClass
    @desc Creates an HTML select element.
*/

var Select =
/*#__PURE__*/
function (_BaseClass) {
  _inherits(Select, _BaseClass);

  /**
      @memberof Select
      @desc Invoked when creating a new class instance, and sets any default parameters.
      @private
  */
  function Select() {
    var _this;

    _classCallCheck(this, Select);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this));
    _this._labelStyle = {
      "font-family": "'Roboto', 'Helvetica Neue', 'HelveticaNeue', 'Helvetica', 'Arial', sans-serif",
      "font-size": "14px",
      "margin-right": "5px"
    };
    _this._options = [];
    _this._optionStyle = {
      "font-family": "'Roboto', 'Helvetica Neue', 'HelveticaNeue', 'Helvetica', 'Arial', sans-serif",
      "font-size": "14px"
    };
    _this._selectStyle = {
      "background": "#fafafa",
      "border": "1px solid #ccc",
      "border-radius": "0",
      "font-family": "'Roboto', 'Helvetica Neue', 'HelveticaNeue', 'Helvetica', 'Arial', sans-serif",
      "font-size": "14px",
      "outline": "0",
      "padding": "3px 5px 4px"
    };
    _this._text = accessor("text");
    _this._value = accessor("value");
    return _this;
  }
  /**
      @memberof Select
      @desc Renders the element to the page.
      @chainable
  */


  _createClass(Select, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      if (this._container === void 0) this.container(select("body").append("div").node());
      var that = this;

      var container = this._container.selectAll("div#d3plus-Form-".concat(this._uuid)).data([0]);

      var svg = this._container.node().tagName.toLowerCase() === "foreignobject";
      container = container.enter().append(svg ? "xhtml:div" : "div").attr("id", "d3plus-Form-".concat(this._uuid)).attr("class", "d3plus-Form d3plus-Form-Select").merge(container);
      var select = container.selectAll("select#d3plus-Select-".concat(this._uuid)).data([0]);
      select = select.enter().append("select").attr("id", "d3plus-Select-".concat(this._uuid)).attr("class", "d3plus-Select").merge(select).call(stylize, this._selectStyle).on("change.d3plus", function () {
        that.selected(this.value);
      });

      for (var event in this._on) {
        if ({}.hasOwnProperty.call(this._on, event)) select.on(event, this._on[event]);
      }

      var options = select.selectAll("option").data(this._options, function (d, i) {
        return _this2._value(d, i);
      });
      options.exit().remove();
      options.enter().append("option").attr("class", "d3plus-Option").merge(options).call(stylize, this._optionStyle).attr("value", function (d, i) {
        return _this2._value(d, i);
      }).html(function (d, i) {
        return _this2._text(d, i);
      }).property("selected", function (d, i) {
        return _this2._selected === void 0 ? !i : "".concat(_this2._value(d, i)) === "".concat(_this2._selected);
      });
      var label = container.selectAll("label#d3plus-Label-".concat(this._uuid)).data(this._label ? [0] : []);
      label.exit().remove();
      label.enter().insert("label", "#d3plus-Select-".concat(this._uuid)).attr("id", "d3plus-Label-".concat(this._uuid)).attr("class", "d3plus-Label").attr("for", "d3plus-Select-".concat(this._uuid)).merge(label).call(stylize, this._labelStyle).html(this._label);
      return this;
    }
    /**
        @memberof Select
        @desc If *selector* is specified, sets the SVG container element to the specified d3 selector or DOM element and returns the current class instance. If *selector* is not specified, returns the current SVG container element, which is `undefined` by default.
        @param {String|HTMLElement} [*selector*]
        @chainable
    */

  }, {
    key: "container",
    value: function container(_) {
      return arguments.length ? (this._container = select(_), this) : this._container;
    }
    /**
        @memberof Select
        @desc Creates a <label> tag for the <select> element.
        @param {String} [*value*]
        @chainable
    */

  }, {
    key: "label",
    value: function label(_) {
      return arguments.length ? (this._label = _, this) : this._label;
    }
    /**
        @memberof Select
        @desc Sets the css styles for the <label> element.
        @param {Object} [*value*]
        @chainable
    */

  }, {
    key: "labelStyle",
    value: function labelStyle(_) {
      return arguments.length ? (this._labelStyle = _, this) : this._labelStyle;
    }
    /**
        @memberof Select
        @desc Defines the array of values to be used as <option> tags inside of the <select> element. If no value is passed, the current array is returned.
        @param {Array} [*value* = []]
        @chainable
    */

  }, {
    key: "options",
    value: function options(_) {
      return arguments.length ? (this._options = _, this) : this._options;
    }
    /**
        @memberof Select
        @desc Sets the css styles for the <option> elements.
        @param {Object} [*value*]
        @chainable
    */

  }, {
    key: "optionStyle",
    value: function optionStyle(_) {
      return arguments.length ? (this._optionStyle = _, this) : this._optionStyle;
    }
    /**
        @memberof Select
        @desc Defines the selected option.
        @param {Function} [*value*]
        @chainable
    */

  }, {
    key: "selected",
    value: function selected(_) {
      return arguments.length ? (this._selected = _, this) : this._selected;
    }
    /**
        @memberof Select
        @desc Sets the css styles for the <select> element.
        @param {Object} [*value*]
        @chainable
    */

  }, {
    key: "selectStyle",
    value: function selectStyle(_) {
      return arguments.length ? (this._selectStyle = _, this) : this._selectStyle;
    }
    /**
        @memberof Select
        @desc Sets the inner text for each <option> element.
        @param {Function|String} [*value* = function(d) { return d.text; }]
        @chainable
    */

  }, {
    key: "text",
    value: function text(_) {
      return arguments.length ? (this._text = typeof _ === "function" ? _ : constant(_), this) : this._text;
    }
    /**
        @memberof Select
        @desc Sets the value for each <option> element.
        @param {Function} [*value* = function(d) { return d.value; }]
        @chainable
    */

  }, {
    key: "value",
    value: function value(_) {
      return arguments.length ? (this._value = _, this) : this._value;
    }
  }]);

  return Select;
}(BaseClass);

export { Select as default };