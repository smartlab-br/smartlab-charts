function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
    @external BaseClass
    @see https://github.com/d3plus/d3plus-common#BaseClass
*/
import { select } from "d3-selection";
import { accessor, BaseClass, constant, stylize } from "d3plus-common";
/**
    @class Radio
    @extends external:BaseClass
    @desc Creates a set of HTML radio input elements.
*/

var Radio =
/*#__PURE__*/
function (_BaseClass) {
  _inherits(Radio, _BaseClass);

  /**
      @memberof Radio
      @desc Invoked when creating a new class instance, and sets any default parameters.
      @private
  */
  function Radio() {
    var _this;

    _classCallCheck(this, Radio);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Radio).call(this));
    _this._labelStyle = {
      "font-family": "'Roboto', 'Helvetica Neue', 'HelveticaNeue', 'Helvetica', 'Arial', sans-serif",
      "font-size": "14px",
      "padding-right": "5px"
    };
    _this._legendStyle = {
      "font-family": "'Roboto', 'Helvetica Neue', 'HelveticaNeue', 'Helvetica', 'Arial', sans-serif",
      "font-size": "14px",
      "padding-right": "5px"
    };
    _this._options = [];
    _this._radioStyle = {
      "margin-right": "10px"
    };
    _this._text = accessor("text");
    _this._value = accessor("value");
    return _this;
  }
  /**
      @memberof Radio
      @desc Renders the element to the page.
      @chainable
  */


  _createClass(Radio, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      if (this._container === void 0) this.container(select("body").append("div").node());
      var that = this;

      var container = this._container.selectAll("div#d3plus-Form-".concat(this._uuid)).data([0]);

      var svg = this._container.node().tagName.toLowerCase() === "foreignobject";
      container = container.enter().append(svg ? "xhtml:div" : "div").attr("id", "d3plus-Form-".concat(this._uuid)).attr("class", "d3plus-Form d3plus-Form-Radio").merge(container);
      var radios = container.selectAll("label").data(this._options, function (d, i) {
        return _this2._value(d, i);
      });
      radios.exit().each(function () {
        select(this.nextSibling).remove();
      }).remove();
      radios = radios.enter().append("label").attr("class", "d3plus-Label").attr("for", function (d, i) {
        return "".concat(_this2._uuid, "-").concat(_this2._value(d, i));
      }).each(function (d, i) {
        var input = document.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("name", "d3plus-Radio-".concat(that._uuid));
        input.setAttribute("id", "".concat(that._uuid, "-").concat(that._value(d, i)));
        input.setAttribute("value", that._value(d, i));
        this.parentNode.insertBefore(input, this.nextSibling);
      }).merge(radios).call(stylize, this._labelStyle).html(function (d, i) {
        return _this2._text(d, i);
      }).each(function (d, i) {
        var checked = that._checked === void 0 ? !i : "".concat(that._value(d, i)) === "".concat(that._checked);
        select(this).classed("active", checked).style("cursor", checked ? "default" : "pointer");
        var input = select(this.nextSibling).property("checked", checked).call(stylize, that._radioStyle).style("cursor", checked ? "default" : "pointer").on("change.d3plus", function () {
          that.checked(this.value);
          radios.each(function (d, i) {
            var checked = "".concat(that._value(d, i)) === "".concat(that._checked);
            select(this).classed("active", checked).style("cursor", checked ? "default" : "pointer");
            select(this.nextSibling).style("cursor", checked ? "default" : "pointer");
          });
        });

        for (var event in that._on) {
          if ({}.hasOwnProperty.call(that._on, event)) input.on(event, that._on[event]);
        }
      });
      var legend = container.selectAll("legend#d3plus-Legend-".concat(this._uuid)).data(this._legend ? [0] : []);
      legend.exit().remove();
      legend.enter().insert("legend", ".d3plus-Label").attr("id", "d3plus-Legend-".concat(this._uuid)).attr("class", "d3plus-Legend").merge(legend).call(stylize, this._legendStyle).html(this._legend);
      return this;
    }
    /**
        @memberof Radio
        @desc Defines the checked input.
        @param {Function} [*value*]
        @chainable
    */

  }, {
    key: "checked",
    value: function checked(_) {
      return arguments.length ? (this._checked = _, this) : this._checked;
    }
    /**
        @memberof Radio
        @desc If *selector* is specified, sets the SVG container element to the specified d3 selector or DOM element and returns the current class instance. If *selector* is not specified, returns the current SVG container element, which is `undefined` by default.
        @param {String|HTMLElement} [*selector*]
        @chainable
    */

  }, {
    key: "container",
    value: function container(_) {
      return arguments.length ? (this._container = select(_), this) : this._container;
    }
    /**
        @memberof Radio
        @desc Sets the css styles for the <label> element.
        @param {Object} [*value*]
        @chainable
    */

  }, {
    key: "labelStyle",
    value: function labelStyle(_) {
      return arguments.length ? (this._labelStyle = _, this) : this._labelStyle;
    }
    /**
        @memberof Radio
        @desc Creates a <legend> tag for the <select> element.
        @param {String} [*value*]
        @chainable
    */

  }, {
    key: "legend",
    value: function legend(_) {
      return arguments.length ? (this._legend = _, this) : this._legend;
    }
    /**
        @memberof Radio
        @desc Sets the css styles for the <legend> element.
        @param {Object} [*value*]
        @chainable
    */

  }, {
    key: "legendStyle",
    value: function legendStyle(_) {
      return arguments.length ? (this._legendStyle = _, this) : this._legendStyle;
    }
    /**
        @memberof Radio
        @desc Defines the array of values to be used as <option> tags inside of the <select> element. If no value is passed, the current array is returned.
        @param {Array} [*value* = []]
        @chainable
    */

  }, {
    key: "options",
    value: function options(_) {
      return arguments.length ? (this._options = _, this) : this._options;
    }
    /**
        @memberof Radio
        @desc Sets the css styles for the <input type="radio"> elements.
        @param {Object} [*value*]
        @chainable
    */

  }, {
    key: "radioStyle",
    value: function radioStyle(_) {
      return arguments.length ? (this._radioStyle = _, this) : this._radioStyle;
    }
    /**
        @memberof Radio
        @desc Sets the inner text for each <option> element.
        @param {Function|String} [*value* = function(d) { return d.text; }]
        @chainable
    */

  }, {
    key: "text",
    value: function text(_) {
      return arguments.length ? (this._text = typeof _ === "function" ? _ : constant(_), this) : this._text;
    }
    /**
        @memberof Radio
        @desc Sets the value for each <option> element.
        @param {Function} [*value* = function(d) { return d.value; }]
        @chainable
    */

  }, {
    key: "value",
    value: function value(_) {
      return arguments.length ? (this._value = _, this) : this._value;
    }
  }]);

  return Radio;
}(BaseClass);

export { Radio as default };