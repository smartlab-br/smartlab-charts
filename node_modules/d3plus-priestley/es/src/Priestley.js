/**
    @external Viz
    @see https://github.com/d3plus/d3plus-viz#Viz
*/

import {min, max, range} from "d3-array";
import {nest} from "d3-collection";
import {scalePoint} from "d3-scale";

import {Axis, date} from "d3plus-axis";
import {accessor, assign, configPrep, elem} from "d3plus-common";
import {Rect} from "d3plus-shape";
import {Viz} from "d3plus-viz";

/**
    @class Priestley
    @extends external:Viz
    @desc Creates a priestley timeline based on an array of data.
*/
var Priestley = (function (Viz) {
  function Priestley() {
    var this$1 = this;


    Viz.call(this);

    this._axis = new Axis().align("end").orient("bottom");
    this._axisConfig = {scale: "time"};
    this._axisTest = new Axis().align("end").gridSize(0).orient("bottom");
    this.end("end");
    this._shapeConfig = assign({}, this._shapeConfig, {
      ariaLabel: function (d, i) { return ((this$1._drawLabel(d, i)) + ", " + (this$1._start(d, i)) + " - " + (this$1._end(d, i)) + "."); }
    });
    this.start("start");

  }

  if ( Viz ) Priestley.__proto__ = Viz;
  Priestley.prototype = Object.create( Viz && Viz.prototype );
  Priestley.prototype.constructor = Priestley;

  /**
      @memberof Priestley
      @desc Extends the render behavior of the abstract Viz class.
      @private
  */
  Priestley.prototype.render = function render (callback) {
    var this$1 = this;


    Viz.prototype.render.call(this, callback);

    if (!this._filteredData) { return this; }

    var data = this._filteredData.map(function (data, i) { return ({
      __d3plus__: true,
      data: data,
      end: this$1._axisConfig.scale === "time" ? date(this$1._end(data, i)) : this$1._end(data, i),
      i: i,
      id: this$1._id(data, i),
      start: this$1._axisConfig.scale === "time" ? date(this$1._start(data, i)) : this$1._start(data, i)
    }); }).filter(function (d) { return d.end - d.start > 0; }).sort(function (a, b) { return a.start - b.start; });

    var nestedData;
    if (this._groupBy.length > 1 && this._drawDepth > 0) {
      var dataNest = nest();
      var loop = function ( i ) {
        dataNest.key(function (d) { return this$1._groupBy[i](d.data, d.i); });
      };

      for (var i = 0; i < this._drawDepth; i++) loop( i );
      nestedData = dataNest.entries(data);
    }
    else { nestedData = [{values: data}]; }

    var maxLane = 0;
    nestedData.forEach(function (g) {
      var track = [];
      g.values.forEach(function (d) {
        track = track.map(function (t) { return t <= d.start ? false : t; });
        var i = track.indexOf(false);
        if (i < 0) {
          d.lane = maxLane + track.length;
          track.push(d.end);
        }
        else {
          track[i] = d.end;
          d.lane = maxLane + i;
        }
      });
      maxLane += track.length;
    });

    var axisConfig = {
      domain: [min(data, function (d) { return d.start; }) || 0, max(data, function (d) { return d.end; }) || 0],
      height: this._height - this._margin.top - this._margin.bottom,
      width: this._width - this._margin.left - this._margin.right
    };

    var transform = "translate(" + (this._margin.left) + ", " + (this._margin.top) + ")";

    this._axisTest
      .config(axisConfig)
      .config(this._axisConfig)
      .select(elem("g.d3plus-priestley-axis-test", {parent: this._select, enter: {opacity: 0}}).node())
      .render();

    this._axis
      .config(axisConfig)
      .config(this._axisConfig)
      .select(elem("g.d3plus-priestley-axis", {parent: this._select, enter: {transform: transform}, update: {transform: transform}}).node())
      .render();

    var axisPad = this._axisTest._padding;

    var xScale = this._axis._d3Scale;

    var yScale = scalePoint()
      .domain(range(0, maxLane, 1))
      .padding(0.5)
      .rangeRound([this._height - this._margin.bottom - this._axisTest.outerBounds().height - axisPad, this._margin.top + axisPad]);

    var step = yScale.step();

    this._shapes.push(new Rect()
      .data(data)
      .duration(this._duration)
      .height(step >= this._padding * 2 ? step - this._padding : step > 2 ? step - 2 : step)
      .label(function (d, i) { return this$1._drawLabel(d.data, i); })
      .select(elem("g.d3plus-priestley-shapes", {parent: this._select}).node())
      .width(function (d) {
        var w = Math.abs(xScale(d.end) - xScale(d.start));
        return w > 2 ? w - 2 : w;
      })
      .x(function (d) { return xScale(d.start) + (xScale(d.end) - xScale(d.start)) / 2; })
      .y(function (d) { return yScale(d.lane); })
      .config(configPrep.bind(this)(this._shapeConfig, "shape", "Rect"))
      .render());

    return this;

  };

  /**
      @memberof Priestley
      @desc If *value* is specified, sets the config method for the axis and returns the current class instance. If *value* is not specified, returns the current axis configuration.
      @param {Object} [*value*]
      @chainable
  */
  Priestley.prototype.axisConfig = function axisConfig (_) {
    return arguments.length ? (this._axisConfig = assign(this._axisConfig, _), this) : this._axisConfig;
  };

  /**
      @memberof Priestley
      @desc If *value* is specified, sets the end accessor to the specified function or key and returns the current class instance. If *value* is not specified, returns the current end accessor.
      @param {Function|String} [*value*]
      @chainable
  */
  Priestley.prototype.end = function end (_) {
    if (arguments.length) {
      if (typeof _ === "function") { this._end = _; }
      else {
        this._end = accessor(_);
        if (!this._aggs[_]) { this._aggs[_] = function (a) { return max(a); }; }
      }
      return this;
    }
    else { return this._end; }
  };

  /**
      @memberof Priestley
      @desc If *value* is specified, sets the start accessor to the specified function or key and returns the current class instance. If *value* is not specified, returns the current start accessor.
      @param {Function|String} [*value*]
      @chainable
  */
  Priestley.prototype.start = function start (_) {
    if (arguments.length) {
      if (typeof _ === "function") { this._start = _; }
      else {
        this._start = accessor(_);
        if (!this._aggs[_]) { this._aggs[_] = function (a) { return min(a); }; }
      }
      return this;
    }
    else { return this._start; }
  };

  return Priestley;
}(Viz));

export default Priestley;

//# sourceMappingURL=Priestley.js.map