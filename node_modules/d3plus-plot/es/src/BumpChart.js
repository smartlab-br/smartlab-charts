import {constant} from "d3plus-common";

import {default as Plot} from "./Plot";

/**
    @class BumpChart
    @extends Plot
    @desc Creates a bump chart based on an array of data.
    @example <caption>the equivalent of calling:</caption>
new d3plus.Plot()
  .discrete("x")
  .shape("Line")
  .x("x")
  .y2(d => this._y(d))
  .yConfig({
    tickFormat: val => {
      const data = this._formattedData;
      const xDomain = this._xDomain;
      const startData = data.filter(d => d.x === xDomain[0]);
      const d = startData.find(d => d.y === val);
      return this._drawLabel(d, d.i);
     }
   })
  .y2Config({
    tickFormat: val => {
      const data = this._formattedData;
      const xDomain = this._xDomain;
      const endData = data.filter(d => d.x === xDomain[xDomain.length - 1]);
      const d = endData.find(d => d.y === val);
      return this._drawLabel(d, d.i);
     }
   })
  .ySort((a, b) => b.y - a.y)
  .y2Sort((a, b) => b.y - a.y)
*/
var BumpChart = (function (Plot) {
  function BumpChart() {
    var this$1 = this;


    Plot.call(this);
    this._discrete = "x";
    this._shape = constant("Line");
    this.x("x");
    this.y2(function (d) { return this$1._y(d); });

    this.yConfig({
      tickFormat: function (val) {
        var data = this$1._formattedData;
        var xMin = data[0].x instanceof Date ? data[0].x.getTime() : data[0].x;
        var startData = data.filter(function (d) { return (d.x instanceof Date ? d.x.getTime() : d.x) === xMin; });
        var d = startData.find(function (d) { return d.y === val; });
        return d ? this$1._drawLabel(d, d.i) : "";
      }
    });
    this.y2Config({
      tickFormat: function (val) {
        var data = this$1._formattedData;
        var xMax = data[data.length - 1].x instanceof Date ? data[data.length - 1].x.getTime() : data[data.length - 1].x;
        var endData = data.filter(function (d) { return (d.x instanceof Date ? d.x.getTime() : d.x) === xMax; });
        var d = endData.find(function (d) { return d.y === val; });
        return d ? this$1._drawLabel(d, d.i) : "";
      }
    });
    this.ySort(function (a, b) { return this$1._y(b) - this$1._y(a); });
    this.y2Sort(function (a, b) { return this$1._y(b) - this$1._y(a); });
  }

  if ( Plot ) BumpChart.__proto__ = Plot;
  BumpChart.prototype = Object.create( Plot && Plot.prototype );
  BumpChart.prototype.constructor = BumpChart;

  return BumpChart;
}(Plot));

export default BumpChart;

//# sourceMappingURL=BumpChart.js.map