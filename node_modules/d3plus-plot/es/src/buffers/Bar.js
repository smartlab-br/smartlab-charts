import {max, min, sum} from "d3-array";
import {nest} from "d3-collection";

import {default as ordinalBuffer} from "./ordinalBuffer";

/**
    Adds a buffer to either side of the non-discrete axis.
    @param {Array} data
    @param {D3Scale} x
    @param {D3Scale} y
    @param {Object} [config]
    @param {Number} [buffer = 10]
    @private
*/
export default function(ref) {
  var this$1 = this;
  var data = ref.data;
  var x = ref.x;
  var y = ref.y;
  var x2 = ref.x2;
  var y2 = ref.y2;
  var buffer = ref.buffer; if ( buffer === void 0 ) buffer = 10;

  var xKey = x2 ? "x2" : "x";
  var yKey = y2 ? "y2" : "y";

  var oppScale = this._discrete === "x" ? y : x;

  var oppDomain = oppScale.domain().slice();

  var isDiscreteX = this._discrete === "x";

  if (isDiscreteX) { oppDomain.reverse(); }

  var negVals, posVals;
  if (this._stacked) {
    var groupedData = nest()
      .key(function (d) { return d[this$1._discrete]; })
      .entries(data)
      .map(function (d) { return d.values.map(function (x) { return x[isDiscreteX ? yKey : xKey]; }); });
    posVals = groupedData.map(function (arr) { return sum(arr.filter(function (d) { return d > 0; })); });
    negVals = groupedData.map(function (arr) { return sum(arr.filter(function (d) { return d < 0; })); });
  }
  else {
    posVals = data.map(function (d) { return d[isDiscreteX ? yKey : xKey]; });
    negVals = posVals;
  }

  var bMax = oppScale(max(posVals));
  if (isDiscreteX ? bMax < oppScale(0) : bMax > oppScale(0)) { bMax += isDiscreteX ? -buffer : buffer; }
  bMax = oppScale.invert(bMax);

  var bMin = oppScale(min(negVals));
  if (isDiscreteX ? bMin > oppScale(0) : bMin < oppScale(0)) { bMin += isDiscreteX ? buffer : -buffer; }
  bMin = oppScale.invert(bMin);

  if (bMax > oppDomain[1]) { oppDomain[1] = bMax; }
  if (bMin < oppDomain[0]) { oppDomain[0] = bMin; }

  if (isDiscreteX) { oppDomain.reverse(); }

  oppScale.domain(oppDomain);

  var discreteScale = isDiscreteX ? x : y;
  discreteScale.domain(ordinalBuffer(discreteScale.domain()));

  return [x, y];

}

//# sourceMappingURL=Bar.js.map